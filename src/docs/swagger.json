{
    "swagger": "2.0",
    "info": {
        "description": "Endpoints details for Footy Predictor API.",
        "title": "Footy Predictor API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Raul Brindus",
            "url": "http://www.swagger.io/support",
            "email": "raul.brindus@gmail.com"
        },
        "license": {
            "name": "Proprietary",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:5000",
    "basePath": "/v1",
    "paths": {
        "/": {
            "get": {
                "description": "Will return a 200 status code if the application is up and running",
                "tags": [
                    "Health Check"
                ],
                "summary": "Health check endpoint.",
                "operationId": "health-check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/countries": {
            "get": {
                "description": "Retrieve all countries",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Countries"
                ],
                "summary": "List countries",
                "operationId": "v1-countries-list",
                "parameters": [
                    {
                        "type": "string",
                        "description": "filter by code",
                        "name": "code",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            true,
                            false
                        ],
                        "type": "boolean",
                        "description": "filter by status",
                        "name": "active",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "order direction",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "id code name active"
                        ],
                        "type": "string",
                        "description": "order field",
                        "name": "order_by",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "records per page",
                        "name": "per_page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/swaggertypes.PaginatedData"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/pagination.PaginatedResponse"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "data": {
                                                            "type": "array",
                                                            "items": {
                                                                "$ref": "#/definitions/countries.CountryOutput"
                                                            }
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swaggertypes.StandardBadRequestError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swaggertypes.StandardUnauthorisedError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swaggertypes.StandardInternalServerError"
                        }
                    }
                }
            },
            "post": {
                "description": "Endpoint used to create a new country record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Countries"
                ],
                "summary": "Create country",
                "operationId": "v1-countries-create",
                "parameters": [
                    {
                        "description": "Request Sample",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/countries.CountryInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/swaggertypes.NoErrorString"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swaggertypes.StandardBadRequestError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swaggertypes.StandardUnauthorisedError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swaggertypes.StandardInternalServerError"
                        }
                    }
                }
            }
        },
        "/countries/{id}": {
            "get": {
                "description": "Retrieve a country identified by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Countries"
                ],
                "summary": "Find country",
                "operationId": "v1-countries-find",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Country ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/swaggertypes.NoErrorI"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/countries.CountryOutput"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swaggertypes.StandardBadRequestError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swaggertypes.StandardUnauthorisedError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swaggertypes.StandardInternalServerError"
                        }
                    }
                }
            },
            "put": {
                "description": "Endpoint used to update an existing country record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Countries"
                ],
                "summary": "Update country",
                "operationId": "v1-countries-update",
                "parameters": [
                    {
                        "description": "Request Sample",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/countries.UpdateCountryInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swaggertypes.NoErrorString"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/swaggertypes.StandardBadRequestError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/swaggertypes.StandardUnauthorisedError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/swaggertypes.StandardInternalServerError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "countries.CountryInput": {
            "type": "object",
            "required": [
                "as_id",
                "name"
            ],
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "as_id": {
                    "type": "integer"
                },
                "code": {
                    "type": "string"
                },
                "flag": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "countries.CountryOutput": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "as_id": {
                    "type": "integer"
                },
                "code": {
                    "type": "string"
                },
                "flag": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "countries.UpdateCountryInput": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "code": {
                    "type": "string"
                },
                "flag": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "pagination.PaginatedResponse": {
            "type": "object",
            "properties": {
                "current_page": {
                    "type": "integer"
                },
                "data": {},
                "from": {
                    "type": "integer"
                },
                "last_page": {
                    "type": "integer"
                },
                "per_page": {
                    "type": "string",
                    "example": "0"
                },
                "to": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "swaggertypes.NoErrorI": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                }
            }
        },
        "swaggertypes.NoErrorString": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "swaggertypes.PaginatedData": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "object",
                    "properties": {
                        "current_page": {
                            "type": "integer"
                        },
                        "data": {},
                        "from": {
                            "type": "integer"
                        },
                        "last_page": {
                            "type": "integer"
                        },
                        "per_page": {
                            "type": "string",
                            "example": "0"
                        },
                        "to": {
                            "type": "integer"
                        },
                        "total": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "swaggertypes.StandardBadRequestError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "error": {
                    "type": "string",
                    "example": "Bad Request"
                }
            }
        },
        "swaggertypes.StandardInternalServerError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "error": {
                    "type": "string",
                    "example": "Server Error"
                }
            }
        },
        "swaggertypes.StandardUnauthorisedError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 401
                },
                "error": {
                    "type": "string",
                    "example": "INVALID_USER_AUTHENTICATION"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}